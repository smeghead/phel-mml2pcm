(ns mml2wav\modules\waveform
  (:require mml2wav\modules\parser :as parser))

# 定数設定
(def SAMPLE-RATE 44100)        # サンプリングレート（Hz）
(def MAX-AMPLITUDE 32767)      # 16-bit PCM の最大振幅
(def FADE-SAMPLES 100)         # フェードイン/アウトのサンプル数

# 特定の周波数と長さで波形を生成
(defn generate-wave [frequency duration-sec amplitude sample-rate & [opts]]
  "指定された周波数と長さの波形データ配列を生成"
  (let [opts         (or opts {})
        # 新しいシグネチャ: (freq t amp idx total sample-rate) -> sample
        sig-fn       (or (opts :osc-fn)
                        (fn [freq t amp idx total sr]
                          (* amp (php/sin (* 2 php/M_PI freq t)))))
        effects      (opts :effects)
        sample-count (php/intval (php/ceil (* duration-sec sample-rate)))]
    
    # 各サンプルの値を計算
    (let [raw-wave
          (loop [i 0 acc []]
            (if (>= i sample-count)
              acc
              # 新: sig-fn へ全パラメータを渡す
              (let [t            (/ i sample-rate)
                    sample-value  (sig-fn frequency t amplitude i sample-count sample-rate)]
                
                # フェードイン/アウト処理
                (let [fade-factor 1.0
                      # フェードイン
                      fade-factor (if (< i FADE-SAMPLES)
                                    (* fade-factor (/ i FADE-SAMPLES))
                                    fade-factor)
                      # フェードアウト
                      fade-factor (if (> i (- sample-count FADE-SAMPLES))
                                    (* fade-factor (/ (- sample-count i) FADE-SAMPLES))
                                    fade-factor)
                      # フェード適用後の値
                      final-value (* sample-value fade-factor)]
                  
                  # 配列に追加
                  (recur (inc i) (push acc final-value))))))]
      # エフェクトチェイン（なければそのまま返す）
      (if (nil? effects)
        raw-wave
        (reduce (fn [wf f] (f wf sample-rate)) raw-wave effects)))))

# 音符から波形データを生成
(defn note-to-wave [duration sample-rate & [opts]]
  "1つの音符または休符から波形データを生成"
  (let [length (duration :length)
        note (duration :note)]
    
    (if (nil? note)
      # 休符の場合は無音波形を返す
      (let [sample-count (php/intval (php/ceil (* length sample-rate)))
            zeros (php/array_fill 0 sample-count 0.0)]
        zeros)
        
      # 音符の場合は周波数を計算して波形を生成
      (let [frequency (parser/note-to-frequency note)]
        (generate-wave frequency length 0.8 sample-rate opts)))))  # 振幅は0.8（最大値の80%）に設定

# 1つの音符のサンプル数を計算
(defn calculate-note-samples [duration sample-rate]
  "1つの音符または休符のサンプル数を計算"
  (let [length (duration :length)]
    (php/intval (php/ceil (* length sample-rate)))))

# シーケンス全体のサンプル数を計算
(defn calculate-total-samples [music-seq sample-rate]
  "音楽シーケンス全体のサンプル数を計算"
  (loop [durations (music-seq :durations)
         total 0]
    (if (empty? durations)
      total
      (recur (rest durations) 
             (+ total (calculate-note-samples (first durations) sample-rate))))))

# 波形を正規化して-1.0〜1.0の範囲に収める
(defn normalize-waveform [waveform]
  "波形データを正規化して-1.0〜1.0の範囲に収める"
  # 最大振幅を計算
  (let [max-amp (apply max (map php/abs waveform))
        max-amp (if (zero? max-amp) 0.0000001 max-amp)] # ゼロ除算を避けるため小さい値から開始

    # 最大振幅で正規化（-1.0〜1.0の範囲）
    (for [sample :in waveform]
      (/ sample max-amp))))
