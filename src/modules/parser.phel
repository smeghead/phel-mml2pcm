(ns mml2wav\modules\parser)

# 音符データ構造体（オクターブと音名の組み合わせ）
(defstruct note [
  octave  # オクターブ値 (0-8)
  name    # 音名 (:c, :c#, :d, :d#, :e, :f, :f#, :g, :g#, :a, :a#, :b)
])

# 演奏される期間の構造体
(defstruct duration [
  length      # 長さ（秒）
  note        # 音符データ、休符の場合はnil
])

# 全体の音楽シーケンス
(defstruct music-sequence [
  tempo       # テンポ（BPM）
  durations   # 期間の配列
])

# 音符を作成するヘルパー関数
(defn create-note [octave name]
  "特定のオクターブと音名を持つ音符を作成"
  (note octave name))

# 休符を含む期間を作成
(defn create-duration [length note-or-nil]
  "音符または休符を含む期間を作成"
  (duration length note-or-nil))

# 音符を含む期間を作成するショートカット
(defn create-note-duration [length octave name]
  "指定された音符を持つ期間を作成"
  (duration length (create-note octave name)))

# 休符期間を作成するショートカット
(defn create-rest-duration [length]
  "休符（無音）期間を作成"
  (duration length nil))

# 新しい空の音楽シーケンスを作成
(defn create-music-sequence [tempo]
  "指定されたテンポで空のシーケンスを作成"
  (music-sequence tempo []))

# 音楽シーケンスに期間を追加
(defn add-duration [sequence duration]
  "シーケンスに新しい期間を追加"
  (put sequence :durations (push (get sequence :durations) duration)))

# 周波数計算のための定数
(def FREQ-A4 440.0)  # A4 (オクターブ4のA音) の周波数（Hz）

# 音名とセミトーン（半音）のマッピング
(def SEMITONES {
  :c  0   # ド
  :c+ 1   # ド#
  :d  2   # レ
  :d+ 3   # レ#
  :e  4   # ミ
  :f  5   # ファ
  :f+ 6   # ファ#
  :g  7   # ソ
  :g+ 8   # ソ#
  :a  9   # ラ
  :a+ 10  # ラ#
  :b  11  # シ
})

# 音符から周波数を計算
(defn note-to-frequency [note]
  "特定の音符の周波数を計算（A4=440Hzを基準）"
  (if (nil? note)
    0.0  # 休符の場合は0Hz
    (let [octave (get note :octave)
          name (get note :name)
          # A4からのセミトーン数を計算
          semitones (+ (- (* 12 (- octave 4)) 9) (get SEMITONES name))]
      # 周波数計算: f = 440 * 2^(n/12) ただしnはA4からのセミトーン数
      (* FREQ-A4 (php/pow 2 (/ semitones 12))))))

# 音符の長さを計算（テンポと音長から実時間を求める）
(defn calculate-note-length [tempo note-length dot]
  "テンポと音長から実際の音符の長さを秒単位で計算"
  (let [beats-per-second (/ tempo 60.0)
        note-duration (/ 4.0 note-length)  # 4分音符を基準とした相対的な長さ
        # 付点があれば1.5倍
        note-duration (if dot (* note-duration 1.5) note-duration)]
    (/ note-duration beats-per-second)))
