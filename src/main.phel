(ns mml2wav\main)

(defn generate-sine-wave [freq duration sample-rate]
  "周波数freqのサイン波をduration秒間生成する"
  (let [samples (php/floor (* duration sample-rate))]
    (for [i :range [0 samples]]
      (let [t (/ i sample-rate)]
	(php/sin (* 2 php/M_PI freq t))))))

(defn normalize-to-16bit [samples]
  "サンプルデータを16bit PCM形式に変換する (-32768〜32767の範囲)"
  (let [result (php/array)]
    (for [s :in samples]
      (let [pcm-value (php/floor (* s 32767.0))]
        # 16bitの範囲内に収める
        (if (> pcm-value 32767) 
	  32767
	  (if (< pcm-value -32768) 
	    -32768 
	    pcm-value))))))

(defn write-wav-header [sample-rate bit-depth channels sample-count]
  "WAVファイルのヘッダを生成する"
  (let [bytes-per-sample (/ bit-depth 8)
        byte-rate (* sample-rate bytes-per-sample channels)
        block-align (* bytes-per-sample channels)
        data-size (* sample-count bytes-per-sample channels)]
    (str 
      (php/pack "C4" 0x52 0x49 0x46 0x46)         # "RIFF"
      (php/pack "V" (+ 36 data-size))             # ファイルサイズ - 8
      (php/pack "C4" 0x57 0x41 0x56 0x45)         # "WAVE"
      (php/pack "C4" 0x66 0x6D 0x74 0x20)         # "fmt "
      (php/pack "V" 16)                           # fmtチャンクサイズ
      (php/pack "v" 1)                            # フォーマットID (PCM)
      (php/pack "v" channels)                     # チャンネル数
      (php/pack "V" sample-rate)                  # サンプリングレート
      (php/pack "V" byte-rate)                    # データ速度
      (php/pack "v" block-align)                  # ブロックサイズ
      (php/pack "v" bit-depth)                    # ビット深度
      (php/pack "C4" 0x64 0x61 0x74 0x61)         # "data"
      (php/pack "V" data-size))))                 # データサイズ

(defn write-16bit-pcm-data [samples]
  "16bit PCMサンプルをバイナリデータに変換"
  (apply str (for [sample :in samples]
              (php/pack "v" (php/intval sample)))))

(defn generate-wav [freq duration sample-rate]
  "指定された周波数の音をWAVファイルとして出力"
  (let [samples (generate-sine-wave freq duration sample-rate)
        pcm-samples (normalize-to-16bit samples)
        header (write-wav-header sample-rate 16 1 (php/count samples))
        data (write-16bit-pcm-data pcm-samples)]
    (str header data)))

(when-not *build-mode*
  (let [# A音(440Hz)を1秒間、サンプリングレート44100Hzで生成
        wav-data (generate-wav 440 1 44100)]
    # 標準出力にバイナリデータを出力
    (php/fwrite php/STDOUT wav-data)
))
